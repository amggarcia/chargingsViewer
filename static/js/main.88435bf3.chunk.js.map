{"version":3,"sources":["types/Usage.tsx","types/SubUsage.tsx","components/FileLoader.tsx","components/UsageRow.tsx","helpers/roundingHelper.tsx","components/AverageRow.tsx","components/AveragesViewer.tsx","components/FileViewer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Usage","idUsage","idServiceProvider","idExternalNumber","idInternalNumber","idNetworkOperator","idChargingStation","idEVSE","startTimestamp","stopTimestamp","totalDuration","energia_total_transacao","SubUsage","this","moment","idSubUsage","idDay","periodDuration","preco_opc","preco_unitario_opc_tempo","preco_unitario_opc_energia","preco_unitario_opc_ativacao","preco_opc_tempo","preco_opc_energia","preco_opc_ativacao","energia_total_periodo","FileLoader","props","useState","setData","fileInput","useRef","parseFile","file","Promise","resolve","reject","parser","Parser","explicitArray","reader","FileReader","onload","evt","parseString","result","err","onerror","readAsText","files","a","tempData","length","i","then","concat","Usages","map","item","Object","assign","forEach","Array","isArray","x","Button","variant","color","onClick","current","click","style","margin","type","id","accept","onChange","e","loadXMLFile","target","ref","multiple","display","value","openAverages","UsageRow","usage","React","open","setOpen","subUsages","getSum","total","num","Fragment","TableRow","TableCell","IconButton","aria-label","size","align","getStartDate","format","getEndDate","reduce","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","Typography","gutterBottom","component","Table","TableHead","TableBody","subUsage","key","getDay","roundAccurately","number","decimalPlaces","Math","round","pow","Number","EPSILON","AverageRow","AverageType","average","averageType","SubUsages","AverageTypeIdentifier","Energy","Duration","Price","Count","AveragesViewer","Provider","setAverageType","calcAverages","_","usages","averages","setAverages","getSubUsages","push","changeType","newAverages","Station","grouped","calcedAverages","keys","newAverage","subRows","calcInnerRows","getInnerRows","innerRows","TableContainer","Paper","p","c","FileViewer","data","modalOpen","setModalOpen","Dialog","onClose","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88435bf3.chunk.js","sourcesContent":["import moment from \"moment\";\r\nimport SubUsage from \"./SubUsage\";\r\n\r\nexport class Usage {\r\n  idUsage: string;\r\n  idServiceProvider: string;\r\n  idExternalNumber: string;\r\n  idInternalNumber: string;\r\n  idNetworkOperator: string;\r\n  idChargingStation: string;\r\n  idEVSE: string;\r\n  startTimestamp: string;\r\n  getStartDate() {\r\n    if (this.startTimestamp)\r\n      return moment(this.startTimestamp, \"YYYYMMDDhhmmss\");\r\n    else return null;\r\n  }\r\n  stopTimestamp: string;\r\n  getEndDate() {\r\n    if (this.stopTimestamp) return moment(this.stopTimestamp, \"YYYYMMDDhhmmss\");\r\n    else return null;\r\n  }\r\n  totalDuration: number;\r\n  energia_total_transacao: number;\r\n  SubUsage: SubUsage[];\r\n}\r\n\r\nexport function getSubUsages(usage: Usage) {\r\n  if (usage.SubUsage.length <= 0) return [] as SubUsage[];\r\n  var subUsages: SubUsage[] = [] as SubUsage[];\r\n\r\n  if (Array.isArray(usage.SubUsage))\r\n    subUsages = usage.SubUsage.concat(subUsages);\r\n  else if (usage.SubUsage) subUsages.push(usage.SubUsage);\r\n  return subUsages;\r\n}\r\n","import moment from 'moment'\r\n\r\nexport default class SubUsage {\r\n    idSubUsage: string\r\n    idDay: string\r\n    public getDay() {\r\n        if (this.idDay)\r\n            return moment(this.idDay, 'YYYYMMDD');\r\n        else\r\n            return null;\r\n    }\r\n    periodDuration: number\r\n    preco_opc: number\r\n    preco_unitario_opc_tempo: number\r\n    preco_unitario_opc_energia: number\r\n    preco_unitario_opc_ativacao: number\r\n    preco_opc_tempo: number\r\n    preco_opc_energia: number\r\n    preco_opc_ativacao: number\r\n    energia_total_periodo: number\r\n}","import React, { useState, useRef } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Parser } from \"xml2js\";\r\nimport { Usage } from \"../types/Usage\";\r\nimport SubUsage from \"../types/SubUsage\";\r\n\r\ninterface props {\r\n  setData: Function;\r\n  openAverages: Function;\r\n}\r\n\r\nfunction FileLoader(props: props) {\r\n  const [loadedUsages, setData] = useState([] as Usage[]);\r\n  const fileInput = useRef(null);\r\n  function onButtonClick() {\r\n    if (fileInput && fileInput.current) fileInput.current.click();\r\n  }\r\n\r\n  function clearFiles() {\r\n    fileInput.current.value = \"\";\r\n    setData([] as Usage[]);\r\n    props.setData([] as Usage[]);\r\n  }\r\n\r\n  function parseFile(file: File): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      var parser = new Parser({ explicitArray: false });\r\n      var reader = new FileReader();\r\n\r\n      reader.onload = function (evt: any) {\r\n        parser.parseString(reader.result, function (err: any, result: any) {\r\n          resolve(result);\r\n        });\r\n      };\r\n      reader.onerror = function (evt: any) {\r\n        reject(evt);\r\n      };\r\n      reader.readAsText(file);\r\n    });\r\n  }\r\n\r\n  async function loadXMLFile(files: FileList) {\r\n    var tempData: Usage[] = [];\r\n\r\n    if (files.length <= 0) return;\r\n    for (var i = 0; i < files.length; i++) {\r\n      await parseFile(files[i]).then((result) => {\r\n        //Very hammer much wow\r\n        tempData = tempData.concat(result.Usages.Usage);\r\n      });\r\n    }\r\n\r\n    tempData = tempData.map((item) => {\r\n      return Object.assign(new Usage(), item);\r\n    });\r\n    tempData.forEach((item) => {\r\n      if (Array.isArray(item.SubUsage)) item.SubUsage = item.SubUsage;\r\n      else if (item.SubUsage) item.SubUsage = [item.SubUsage];\r\n      else item.SubUsage = [];\r\n\r\n      item.SubUsage = item.SubUsage.map((x) => {\r\n        return Object.assign(new SubUsage(), x);\r\n      });\r\n    });\r\n    setData(tempData);\r\n    props.setData(tempData);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={onButtonClick}\r\n        style={{ margin: \"10px\" }}\r\n      >\r\n        Load Files\r\n      </Button>\r\n      <input\r\n        type=\"file\"\r\n        id=\"file\"\r\n        accept=\".xml\"\r\n        onChange={(e) => loadXMLFile(e.target.files)}\r\n        ref={fileInput}\r\n        multiple\r\n        style={{ display: \"none\" }}\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        onClick={clearFiles}\r\n        style={{ margin: \"10px\" }}\r\n      >\r\n        Clear Files\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        style={{ margin: \"10px\" }}\r\n        onClick={() => props.openAverages(true)}\r\n      >\r\n        Get averages\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FileLoader;\r\n","import React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\r\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\r\nimport { Usage } from \"../types/Usage\";\r\nimport SubUsage from \"../types/SubUsage\";\r\n\r\ninterface UsageRowProps {\r\n  usage: Usage;\r\n}\r\n\r\nfunction UsageRow(props: UsageRowProps) {\r\n  const { usage } = props;\r\n  const [open, setOpen] = React.useState(false);\r\n  const subUsages = getSubUsages();\r\n\r\n  function getSubUsages() {\r\n    if (Array.isArray(usage.SubUsage)) return usage.SubUsage;\r\n    else if (usage.SubUsage) return [usage.SubUsage];\r\n    else return [];\r\n  }\r\n\r\n  function getSum(total: number, num: number) {\r\n    return total + num * 1;\r\n  }\r\n  function getPriceOpc(): number {\r\n    if (!subUsages) return 0;\r\n    const pricesOPC: number[] = subUsages.map((item) => {\r\n      return item.preco_opc as number;\r\n    });\r\n    const result: number = pricesOPC.reduce(getSum, 0);\r\n    return result;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <TableRow>\r\n        <TableCell>\r\n          <IconButton\r\n            aria-label=\"expand row\"\r\n            size=\"small\"\r\n            onClick={() => setOpen(!open)}\r\n          >\r\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell>{usage.idUsage}</TableCell>\r\n        <TableCell align=\"right\">{usage.idServiceProvider}</TableCell>\r\n        <TableCell align=\"right\">{usage.idChargingStation}</TableCell>\r\n        <TableCell align=\"right\">\r\n          {usage.getStartDate().format(\"YYYY-MM-DD HH24:mm:ss\")}\r\n        </TableCell>\r\n        <TableCell align=\"right\">\r\n          {usage.getEndDate().format(\"YYYY-MM-DD HH24:mm:ss\")}\r\n        </TableCell>\r\n        <TableCell align=\"right\">{usage.energia_total_transacao}</TableCell>\r\n        <TableCell align=\"right\">{usage.totalDuration}</TableCell>\r\n        <TableCell align=\"right\">{getPriceOpc()}</TableCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={9}>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Box margin={1}>\r\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                SubUsage\r\n              </Typography>\r\n              <Table size=\"small\" aria-label=\"purchases\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>ID</TableCell>\r\n                    <TableCell>Date</TableCell>\r\n                    <TableCell>kW h</TableCell>\r\n                    <TableCell>Duration</TableCell>\r\n                    <TableCell align=\"right\">Price</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {subUsages.map((subUsage: SubUsage) => (\r\n                    <TableRow key={subUsage.idSubUsage}>\r\n                      <TableCell>{subUsage.idSubUsage}</TableCell>\r\n                      <TableCell>\r\n                        {subUsage.getDay().format(\"YYYY-MM-DD\")}\r\n                      </TableCell>\r\n                      <TableCell>{subUsage.energia_total_periodo}</TableCell>\r\n                      <TableCell>{subUsage.periodDuration}</TableCell>\r\n                      <TableCell align=\"right\">{subUsage.preco_opc}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </Box>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default UsageRow;\r\n","export function roundAccurately(number: number, decimalPlaces: number): number {\r\n\r\n    return Math.round(number * Math.pow(10, decimalPlaces) + Number.EPSILON) / Math.pow(10, decimalPlaces);\r\n    //return Number(Math.round(number + Number.EPSILON + decimalPlaces) + Number.EPSILON + (decimalPlaces * -1))\r\n}","import React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\r\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\r\nimport { Average } from \"./AveragesViewer\";\r\nimport SubUsage from \"../types/SubUsage\";\r\n\r\ninterface AverageRowProps {\r\n  average: Average;\r\n  averageType: string;\r\n}\r\n\r\nfunction AverageRow(props: AverageRowProps) {\r\n  const { average, averageType } = props;\r\n  const [open, setOpen] = React.useState(false);\r\n  const subUsages = getSubUsages();\r\n\r\n  function getSubUsages() {\r\n    if (Array.isArray(average.SubUsages)) return average.SubUsages;\r\n    else if (average.SubUsages) return [average.SubUsages];\r\n    else return [];\r\n  }\r\n\r\n  function getSum(total: number, num: number) {\r\n    return total + num * 1;\r\n  }\r\n  function getPriceOpc(): number {\r\n    if (!subUsages) return 0;\r\n    const pricesOPC: number[] = subUsages.map((item) => {\r\n      return item.preco_opc as number;\r\n    });\r\n    const result: number = pricesOPC.reduce(getSum, 0);\r\n    return result;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <TableRow>\r\n        <TableCell>\r\n          <IconButton\r\n            aria-label=\"expand row\"\r\n            size=\"small\"\r\n            onClick={() => setOpen(!open)}\r\n          >\r\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell>{average.AverageTypeIdentifier}</TableCell>\r\n        <TableCell>{average.Energy}</TableCell>\r\n        <TableCell>{average.Duration}</TableCell>\r\n        <TableCell>{average.Price}</TableCell>\r\n        <TableCell>{average.Count}</TableCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={5}>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Box margin={1}>\r\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                SubUsage\r\n              </Typography>\r\n              <Table size=\"small\" aria-label=\"purchases\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>ID</TableCell>\r\n                    <TableCell>kW h</TableCell>\r\n                    <TableCell>Duration</TableCell>\r\n                    <TableCell align=\"right\">Price</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {subUsages.map((subUsage: SubUsage) => (\r\n                    <TableRow key={subUsage.idSubUsage}>\r\n                      <TableCell>{subUsage.idSubUsage}</TableCell>\r\n                      <TableCell>{subUsage.energia_total_periodo}</TableCell>\r\n                      <TableCell>{subUsage.periodDuration}</TableCell>\r\n                      <TableCell align=\"right\">{subUsage.preco_opc}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </Box>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default AverageRow;\r\n","import React, { useState } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Usage } from \"../types/Usage\";\r\nimport SubUsage from \"../types/SubUsage\";\r\nimport * as _ from \"lodash\";\r\nimport { roundAccurately } from \"../helpers/roundingHelper\";\r\nimport AverageRow from \"./AverageRow\";\r\n\r\ninterface AveragesViewerProps {\r\n  usages: Usage[];\r\n}\r\nenum AverageType {\r\n  Provider = \"Provider\",\r\n  Station = \"Station\",\r\n}\r\n\r\nexport interface Average {\r\n  AverageTypeIdentifier: string;\r\n  Duration: number;\r\n  Price: number;\r\n  Energy: number;\r\n  SubUsages: SubUsage[];\r\n  Count: number;\r\n}\r\n\r\nfunction AveragesViewer(props: AveragesViewerProps) {\r\n  const [averageType, setAverageType] = useState(AverageType.Provider);\r\n  const [averages, setAverages] = useState(\r\n    calcAverages(\r\n      _.groupBy(props.usages, (x) => x.idServiceProvider),\r\n      AverageType.Provider\r\n    )\r\n  );\r\n\r\n  function getSubUsages(usage: Usage) {\r\n    if (usage.SubUsage.length <= 0) return [] as SubUsage[];\r\n    var subUsages: SubUsage[] = [] as SubUsage[];\r\n\r\n    if (Array.isArray(usage.SubUsage))\r\n      subUsages = usage.SubUsage.concat(subUsages);\r\n    else if (usage.SubUsage) subUsages.push(usage.SubUsage);\r\n    return subUsages;\r\n  }\r\n\r\n  function changeType(type: AverageType) {\r\n    setAverageType(type);\r\n    var newAverages = [] as Average[];\r\n    if (props.usages.length > 0) {\r\n      switch (type) {\r\n        case AverageType.Station:\r\n          newAverages = calcAverages(\r\n            _.groupBy(props.usages, (x) => x.idChargingStation),\r\n            type\r\n          );\r\n          setAverages(newAverages);\r\n          break;\r\n        case AverageType.Provider:\r\n          newAverages = calcAverages(\r\n            _.groupBy(props.usages, (x) => x.idServiceProvider),\r\n            type\r\n          );\r\n          setAverages(newAverages);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n  function calcAverages(\r\n    grouped: _.Dictionary<Usage[]>,\r\n    type: String\r\n  ): Average[] {\r\n    var calcedAverages = [] as Average[];\r\n    Object.keys(grouped).forEach((x) => {\r\n      var newAverage = {} as Average;\r\n      newAverage.AverageTypeIdentifier = x;\r\n      newAverage.Duration = 0;\r\n      newAverage.Price = 0;\r\n      newAverage.Energy = 0;\r\n      newAverage.Count = 0;\r\n      newAverage.SubUsages = [];\r\n      grouped[x].forEach((usage) => {\r\n        const subUsages = getSubUsages(usage);\r\n        newAverage.Duration += _.sumBy(subUsages, (x) => x.periodDuration * 1);\r\n        newAverage.Price += _.sumBy(subUsages, (x) => x.preco_opc * 1);\r\n        newAverage.Energy += _.sumBy(\r\n          subUsages,\r\n          (x) => x.energia_total_periodo * 1\r\n        );\r\n        newAverage.Count += 1;\r\n      });\r\n      newAverage.Duration = roundAccurately(newAverage.Duration, 3);\r\n      newAverage.Price = roundAccurately(newAverage.Price, 2);\r\n      newAverage.Energy = roundAccurately(newAverage.Energy, 3);\r\n      newAverage.SubUsages = getInnerRows(grouped[x], type);\r\n      calcedAverages.push(newAverage);\r\n    });\r\n    return calcedAverages;\r\n  }\r\n\r\n  function calcInnerRows(grouped: _.Dictionary<Usage[]>): SubUsage[] {\r\n    var innerRows = [] as SubUsage[];\r\n    Object.keys(grouped).forEach((x) => {\r\n      var newAverage = {} as SubUsage;\r\n      newAverage.idSubUsage = x;\r\n      newAverage.energia_total_periodo = 0;\r\n      newAverage.periodDuration = 0;\r\n      newAverage.preco_opc = 0;\r\n      grouped[x].forEach((usage) => {\r\n        const subUsages = getSubUsages(usage);\r\n        newAverage.periodDuration += _.sumBy(\r\n          subUsages,\r\n          (x) => x.periodDuration * 1\r\n        );\r\n        newAverage.preco_opc += _.sumBy(subUsages, (x) => x.preco_opc * 1);\r\n        newAverage.energia_total_periodo += _.sumBy(\r\n          subUsages,\r\n          (x) => x.energia_total_periodo * 1\r\n        );\r\n      });\r\n      newAverage.periodDuration = roundAccurately(newAverage.periodDuration, 3);\r\n      newAverage.preco_opc = roundAccurately(newAverage.preco_opc, 2);\r\n      newAverage.energia_total_periodo = roundAccurately(\r\n        newAverage.energia_total_periodo,\r\n        3\r\n      );\r\n      innerRows.push(newAverage);\r\n    });\r\n    return innerRows;\r\n  }\r\n  function getInnerRows(usages: Usage[], type: String): SubUsage[] {\r\n    let subRows = [] as SubUsage[];\r\n    if (usages.length > 0) {\r\n      switch (type) {\r\n        case AverageType.Station:\r\n          subRows = calcInnerRows(\r\n            _.groupBy(usages, (x) => x.idServiceProvider)\r\n          );\r\n          break;\r\n        case AverageType.Provider:\r\n          subRows = calcInnerRows(\r\n            _.groupBy(usages, (x) => x.idChargingStation)\r\n          );\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      return subRows;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={() => changeType(AverageType.Provider)}\r\n        style={{ margin: \"10px\" }}\r\n      >\r\n        {\" \"}\r\n        By Provider\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={() => changeType(AverageType.Station)}\r\n        style={{ margin: \"10px\" }}\r\n      >\r\n        {\" \"}\r\n        By Station\r\n      </Button>\r\n      <TableContainer component={Paper}>\r\n        <Table aria-label=\"collapsible table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>{}</TableCell>\r\n              <TableCell>{averageType}</TableCell>\r\n              <TableCell>kW h</TableCell>\r\n              <TableCell>Duration</TableCell>\r\n              <TableCell>Price</TableCell>\r\n              <TableCell>Count</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>{\"Totals\"}</TableCell>\r\n              <TableCell>{}</TableCell>\r\n              <TableCell>\r\n                {roundAccurately(\r\n                  averages.reduce((p, c) => p + c.Energy, 0),\r\n                  3\r\n                )}\r\n              </TableCell>\r\n              <TableCell>\r\n                {roundAccurately(\r\n                  averages.reduce((p, c) => p + c.Duration, 0),\r\n                  3\r\n                )}\r\n              </TableCell>\r\n              <TableCell>\r\n                {roundAccurately(\r\n                  averages.reduce((p, c) => p + c.Price, 0),\r\n                  2\r\n                )}\r\n              </TableCell>\r\n              <TableCell>\r\n                {roundAccurately(\r\n                  averages.reduce((p, c) => p + c.Count, 0),\r\n                  2\r\n                )}\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {averages.map((average: Average) => (\r\n              <AverageRow\r\n                average={average}\r\n                averageType={averageType}\r\n              ></AverageRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AveragesViewer;\r\n","import React, { useState } from 'react';\r\nimport FileLoader from './FileLoader'\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport UsageRow from './UsageRow'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport AveragesViewer from './AveragesViewer';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\ninterface test {\r\n    cenas: string\r\n}\r\n\r\n\r\nfunction FileViewer() {\r\n    const [data, setData] = useState([] as any[]);\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    return (\r\n        <div>\r\n\r\n            <Dialog\r\n                open={modalOpen}\r\n                onClose={() => setModalOpen(false)}\r\n            >\r\n                <AveragesViewer usages={data}></AveragesViewer>\r\n            </Dialog>\r\n            <FileLoader setData={setData} openAverages={setModalOpen}></FileLoader>\r\n            <TableContainer component={Paper}>\r\n                <Table aria-label=\"collapsible table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell></TableCell>\r\n                            <TableCell>ID</TableCell>\r\n                            <TableCell >Provider</TableCell>\r\n                            <TableCell >Station</TableCell>\r\n                            <TableCell >Start</TableCell>\r\n                            <TableCell >Finish</TableCell>\r\n                            <TableCell>kW h</TableCell>\r\n                            <TableCell>Duration</TableCell>\r\n                            <TableCell>Price</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {data.map((usage) => (\r\n                            <UsageRow key={usage.idUsage} usage={usage} />\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FileViewer;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport FileViewer from './components/FileViewer'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <FileViewer></FileViewer>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}